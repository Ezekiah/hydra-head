h1. Hydra-Head

This is the core part of Hydra code needed to create a Hydra application.

For a more thorough overview of the Hydra framework, see "HYDRA_OVERVIEW.textile":http://github.com/projecthydra/hydrangea/blob/master/HYDRA_OVERVIEW.textile

This is (currently) a Ruby on Rails 2 Engines Plugin.  It will eventually become Rails 3, and then a Rails 3 gem.



h2. How to Create a Rails Application from the Rails Application Used to Test Hydra-Head 

h3. Prerequisites
* ruby v 1.8.7 or higher
* rubygems
* these ruby gems:
** bundler
** rails version < 3.
* git
* java 1.6 or higher
* rvm


h3.  Installation Instructions:

1.  we strongly suggest using RVM  (ruby virtual machine) as a means of keeping your different ruby applications with their specific gem requirements from having version clashes. 

* get rvm

Tell RVM to use whatever ruby version and gemset name you like:

If you don't have the desired ruby version, e.g. ree-1.8.7, then install it.
<pre>
rvm install ree-1.8.7
</pre>

2.  Get the rails application code from github.
<pre>
git clone git://github.com/projecthydra/hydra-plugin_test_host.git my-hydra-app
cd my-hydra-app
</pre>

3.  Create an RVM gemset for your local hydra application
The following will create an .rvmrc file, which ensures that this gemset will be used whenever you are in the my-hydra-app directory.
<pre>
echo "rvm use ree-1.8.7@my-hydra-app --create" >.rvmrc
. .rvmrc
</pre>

You should get a message like this:
 Using /usr/local/you/.rvm/gems/ree-1.8.7-2010.02 with gemset my-hydra-app

4.  Install bundler and rails gems into the gemset:
<pre>
gem install bundler
gem install -v=2.3.11 --no-rdoc --no-ri rails
</pre>

5.  Get the hydra-head engines plugin from github.
<pre>
git clone git@github.com:projecthydra/hydra-head.git vendor/plugins/hydra-head
</pre>

6.  Edit config/environment.rb.
NOTE:  this step will go away when we have the generator for rails 3.
The testing rails application is set up a specific way to _test_ the hydra-head plugin.  For use as the actual hydra application, it needs tweaking.
These lines:
<pre>
  Rails::Initializer.run do |config|
    config.plugin_paths += ["#{RAILS_ROOT}/vendor/plugins/blacklight/vendor/plugins", "#{RAILS_ROOT}/../.."]
    config.gem 'authlogic', :version => '2.1.2'
</pre>
should read
<pre>
  Rails::Initializer.run do |config|
    config.plugin_paths += ["#{RAILS_ROOT}/vendor/plugins/blacklight/vendor/plugins"]
    config.gem 'authlogic', :version => '2.1.2'
</pre>

NAOMI ASKS:  should we explicitly indicate the plugins?

And these lines:
<pre>
  # Only load the plugins named here, in the order given (default is alphabetical).
  # :all can be used as a placeholder for all plugins not explicitly named
  # config.plugins = [ :exception_notification, :ssl_requirement, :all ]
</pre>
should read
<pre>
</pre>

7.  Install the required ruby gems via Bundler.
You first need a Gemfile; copy the one from the hydra-head plugin.
<pre>
cp vendor/plugins/hydra-head/Gemfile .
</pre>

Then have bundler install the gems.
<pre>
bundle install
</pre>

8.  Migrate the databases.
<pre>
rake db:migrate:all
</pre>

LOOK HERE:  ERROR

i$ rake db:migrate:all
(in /Users/naomi/hypatia/from-test-app)
DEPRECATION WARNING: Rake tasks in vendor/plugins/blacklight/tasks and vendor/plugins/engines/tasks are deprecated. Use lib/tasks instead. (called from /Users/naomi/.rvm/gems/ree-1.8.7-2010.02@from-test-app/gems/rails-2.3.11/lib/tasks/rails.rb:10)
SOLRIZER: loading field name mappings from /Users/naomi/hypatia/from-test-app/config/solr_mappings.yml
resetting mappings for Solrizer::FieldMapper::Default
rake aborted!
no such file to load -- hydra/testing_server
/Users/naomi/hypatia/from-test-app/Rakefile:10


9.  Pull a copy of jetty pre-configured for Hydra with Fedora and Solr installed.
<pre>
git clone git@github.com:projecthydra/hydra-jetty jetty
</pre>

10.  Start Jetty, preloaded with Fedora and Solr applications.

Note that java 1.6 must be invoked by the "java" command or Hydrangea won't work.

<pre>
rake hydra:jetty:load
</pre>

This will start up jetty on port 8983.

11.  Load some test data


12.  Start the rails app


h4. Don't forget to stop jetty.

It's easy to forget a running jetty, start another jetty process, 
and then get confusing behavior because you have two jetty instances on the
same port.

From the rails application directory  (my-hydra-app)
<pre>
rake hydra:jetty:stop
</pre>



h3.  Running the hydra-head tests

1. Migrate the test databases.
<pre>
rake db:drop RAILS_ENV=test
rake db:migrate:all RAILS_ENV=test
</pre>

2. Stop the test jetty.
<pre>
rake hydra:jetty:stop
</pre>


3. Clean out data in the test jetty.
<pre>
</pre>



h2. Acknowledgements

h3. Design & Strategic Contributions

The Hydra Framework would not exist without the extensive design effort undertaken by representatives of repository initiatives from Stanford University, University of Virginia and University of Hull.  Contributors to that effort include Tom Cramer, Lynn McRae, Martha Sites, Richard Green, and Chris Awre.  

Thorny Staples from Fedora Commons & DuraSpace deserves special thanks for putting all of these people in the same room together.

h3. Technical Contributions

*Technical Lead:* Matt Zumwalt ("MediaShelf":http://yourmediashelf.com)
*User Interface & User Experience Designer:* Jennifer Vine

Developers:
Eddie Shin, Jessie Keck, Christopher Jesudurai, McClain Looney, Luke Francl, Dan Weinand, Ken Earley, Paul Wenzel, Bess Sadler, Naomi Dushay

Testers:
Charles Kerns, Bess Sadler, Richard Green, Tom Lauderman, Mark Matienzo, Michael Olson, Hannah Frost

h3. Additional thanks

Project Blacklight and the Blacklight contributors
Willy Mene, who created one of the "Hydra head" prototypes on which Hydrangea is based.
Chris Fitzpatrick & Douglas Kim, who created the first version of Solrizer and then thoroughly exercised it.
Stu Snydman, project manager for the SALT Hydra prototype.

