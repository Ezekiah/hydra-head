h1. Hydra-Head

Hydra-Head is a Rails Engines plugin containing the core code for a Hydra application.  The full hydra stack includes the following:

- "Blacklight":http://projectblacklight.org/  (a rails engines plugin) for the User Interface
- "Solr":http://lucene.apache.org/solr/ (a java application, also ported to other languages) for the Search Engine 
- "ActiveFedora":https://github.com/mediashelf/active_fedora (a ruby gem) to let the rails application talk to fedora 
- "OM (Opinionated Metadata)":https://github.com/mediashelf/om (a ruby gem) to streamline the metadata configuration
- "Solrizer":https://github.com/projecthydra/solrizer (a ruby gem) to write content to the Solr index
- "SolrizerFedora":https://github.com/projecthydra/solrizer-fedora (a ruby gem) to write Fedora content to the Solr index.
- HydraHead (a rails engines plugin) to glue it all together 

For a more thorough overview of the Hydra framework, see "HYDRA_OVERVIEW.textile":https://github.com/projecthydra/hydrangea/blob/master/HYDRA_OVERVIEW.textile.

This is a Ruby on Rails 3 gem.

h2. Installation/Setup

h3. Install Rails, Bundler and Devise

Currently hydra-head is compatible with Rails 3.0.x and incompatible with Rails 3.1

<pre>
gem install 'rails' --version '~>3.0.11'
gem install 'bundler'
</pre>
  
h3. Generate a new rails application:

<pre>
rails new my_hydra_head
cd my_hydra_head
</pre>

h3. Install Dependencies

First, add them to the "Gemfile":http://gembundler.com/gemfile.html of your application:

<pre>
  source 'http://rubygems.org'

  gem 'rails', '~>3.0.11'

  gem 'blacklight', '~> 3.1.2'
  gem 'hydra-head', '~> 3.2.0'

  # We will assume that you're using sqlite3 for testing/demo, 
  # but in a production setup you probably want to use a real sql database like mysql or postgres
  gem 'sqlite3-ruby', :require => 'sqlite3'

  #  We will assume you're using devise in tutorials/documentation. 
  # You are free to implement your own User/Authentication solution in its place.
  gem 'devise'

  # For testing.  You will probably want to use all of these to run the tests you write for your hydra head
  group :development, :test do 
         gem 'solrizer-fedora', '>=1.0.1'
         gem 'ruby-debug'
         gem 'rspec'
         gem 'rspec-rails', '>=2.5.0'
         gem 'mocha'
         gem 'cucumber-rails'
         gem 'database_cleaner'
         gem 'capybara'
         gem 'bcrypt-ruby'
         gem "jettywrapper"
  end # (leave this comment here to catch a stray line inserted by blacklight!)
</pre>

To install all of the dependencies, run:

<pre>
bundle install
</pre>

On some systems, you will have to install system libraries that various gems rely on.  For example, in order to install the curl gem on ubuntu you have to first install libcurl4-openssl-dev and then re-run bundler.

Even if all of the dependencies are satisfied, this will take a _very_ long time the first time you run it.  IF you become impatient, hit Ctl+C then enter this:

<pre>
  gem install blacklight
  gem install hydra-head -v 3.2.0
</pre>

Then re-run bundle install and it will run slightly faster.

h3. Advanced usage: Running against the freshest version of the hydra-head code from Github

*We don't recommend this for new users or for production applications*, but it is very useful during active development.

If you are in a position where you want/need to run your application with the very latest hydra-head code from Github, this is easy to do.  Simply update the line in your Gemfile that lists hydra-head as a dependency and enter this instead:

<pre>
  gem "hydra-head", :git => "git://github.com/projecthydra/hydra-head.git"
</pre> 

After updating the Gemfile, re-run 'bundle install'.

You can also do this with other gems.  For example, if you want to force your app to use the latest active-fedora code from the "HYDRA-721" branch on GitHub, you can put this in your Gemfile:

<pre>
gem "active-fedora", :git=>'git://github.com/mediashelf/active_fedora.git'
</pre>
  
h3. Run the generators and migrations:

Run the blacklight generator

<pre>rails g blacklight --devise</pre>

Run the hydra-head generator

<pre>rails g hydra:head -df</pre>

Run the database migrations

<pre>
rake db:migrate
rake db:test:prepare
</pre>

h3. You're done.

Congratulations.  You've set up the code for your Hydra Head.  

Read the next section on Tools for Developing and Testing, then read "How to Get Started":http://hudson.projecthydra.org/job/hydra-head-rails3-plugin/Documentation/file.HOW_TO_GET_STARTED.html to get a sense of what you can do with your Hydra Head.

h2. Tools to Help You Develop and Test your Application

h3. The Hydra Jetty

The Hydra project provides a copy of Jetty with Fedora and Solr pre-installed.  This is useful for running tests against and for running your code against while you're actively working on your hydra head.

Most projects add hydra jetty to their code as a git submodule

<pre>
  git submodule add git://github.com/projecthydra/hydra-jetty.git jetty
  git commit -m"added jetty submodule"
</pre>

Now that you've added the submodule to your git repository, whenever you grab a new working copy of the code, you can get hydra-jetty by running:

<pre>
git submodule init
git submodule update
</pre>

*Important*: To apply the your application's solrconfig.xml and schema.xml to the copy of solr in hydra-jetty, run this:

<pre>
  rake hydra:jetty:config
</pre>

Now you're ready to start jetty.  We've written a useful gem that gives you rake tasks for starting and stopping jetty.  Make sure you have jettywrapper in your Gemfile

<pre>
  gem "jettywrapper"
</pre>

Then run <pre>bundle install<pre>

Now that you have jettywrapper installed, to start jetty use

<pre>
  rake jetty:start
</pre>

To stop jetty

<pre>
  rake jetty:stop
</pre>

For more information about using jettywrapper, see http://hudson.projecthydra.org/job/jettywrapper/Documentation/

h3.  RSpec and Cucumber for Testing

We STRONGLY recommend that you write tests for every local change you make.  This will allow you to ensure that upgrading the core code doesn't break any local changes you have made.

(when should it be a feature rather than a spec)
very basic rule:  if it's testing something created with view, use a cucumber feature to test.  If it's not created by view code, use a spec to test. 

h4. RSpec for Functional Tests

Most Ruby projects use either RSpec or Shoulda to write and run their Functional Tests.  We use RSpec for all of the Hydra software.

To set up all the files you need to use rspec to test your Rails application, simply run the rspec generator.  This will create a directory called "spec" and put all of the necessary files into it.

<pre>
    rails g rspec:install
</pre>

h4. Cucumber to Test User Experience 

If you will be writing cucumber tests, run the cucumber generator.  This will create a directory called "features" and populate it with all the basic parts you need to run Cucumber tests on your Rails application.

<pre>rails g cucumber:install</pre>

h2. Modifying and Testing the hydra-head Gem 

For those developers who want to or need to work on the hydra-head gem itself, see the "Instructions for Contributors":http://hudson.projecthydra.org/job/hydra-head-rails3-plugin/Documentation/file.TESTING.html

h2. Acknowledgements

h3. Design & Strategic Contributions

The Hydra Framework would not exist without the extensive design effort undertaken by representatives of repository initiatives from Stanford University, University of Virginia, University of Hull and MediaShelf LLC.  Contributors to that effort include Tom Cramer, Lynn McRae, Martha Sites, Richard Green, Chris Awre, and Matt Zumwalt.  

Thorny Staples from Fedora Commons & DuraSpace deserves special thanks for putting all of these people in the same room together.
