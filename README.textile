h1. Hydra-Head

Hydra-head is a Rails plugin that depends upon and extends Blacklight.  Wherever possible, hydra-head relies on Blacklight's views and styling.  This means that while hydra-head provides a lot of unique functionality, you will only get something that looks like a complete application when you combine hydra-head with Blacklight in a Rails application.  

- "Blacklight":http://projectblacklight.org/  (a rails engines plugin) for the User Interface
- "Fedora":http://fedora-commons.org/ (a java web application) for the digital content repository
- "Solr":http://lucene.apache.org/solr/ (a java web application, also ported to other languages) for the Search Engine 
- "ActiveFedora":https://github.com/mediashelf/active_fedora (a ruby gem) to let the rails application talk to Fedora.  Somewhat analogous to ActiveRecord in Rails. 
- "OM (Opinionated Metadata)":https://github.com/mediashelf/om (a ruby gem) to streamline the translation from XML metadata and ruby objects (avoid XPath!)
- "Solrizer":https://github.com/projecthydra/solrizer (a ruby gem) to write content to the Solr index
- "SolrizerFedora":https://github.com/projecthydra/solrizer-fedora (a ruby gem) to write Fedora content to the Solr index.
- HydraHead (this rails engines plugin) to glue it all together 

For a more thorough overview of the Hydra framework, see "HYDRA_OVERVIEW.textile":https://github.com/projecthydra/hydrangea/blob/master/HYDRA_OVERVIEW.textile.

This is a Ruby on Rails 3 gem.

h2. Installation/Setup

h3. Generate a new rails application:

<pre>
rails new my_hydra_app
cd my_hydra_app
</pre>

h3. Add the blacklight and hydra-head gems:

First, add them to the Gemfile of your application:

<pre>
source 'http://rubygems.org'

gem blacklight, '3.0.0'  
gem hydra-head
</pre>

To install, run:

<pre>
bundle install
</pre>

h3. Run the generators and migrations:

<pre>
# run the blacklight generator
rails g blackight -d

# run the hydra-head generator
rails g hydra-head -df

# run the migrations
rake db:migrate
</pre>

h2. Testing the gem during development

h3. The Hydra Jetty

In order to test the gem during development, the hydra-jetty is included as a submodule to provide both a fedora and solr instance.  Once you have cloned the github repository, 
run the following commands to load the jetty:

<pre>
git submodule init
git submodule update
</pre>

To start the jetty:

<pre>
rake hydra:jetty:start
</pre>

Note: the first time you start the jetty, you must use the following command in order to properly configure the jetty:

<pre>
rake hydra:jetty:load
</pre>

h3.  Testing the app

The specs and features for testing the gem within the context of a rails 3 app are all contained within the test_support directory.  Once you have 
installed the test app, you will be able to run the specs/features from within that app via the provided rake tasks.

A rake task is provided for setting up a rails 3 test app in the tmp/test_app directory.  To generate the app, run:

<pre>
rake hyhead:setup_test_app
</pre>

Once you have done this and have a jetty running, you are ready to run the specs and cucumbers:

<pre>
rake hyhead:test
</pre>

This will run the specs and cucumber features from within the test application.

In order to run a single spec, use the following from the command line:

<pre>
export RAILS_ROOT="tmp/test_app"
rspec test_support/spec/controllers/catalog_controller_spec.rb  # path to the spec file you wish to run
</pre>

h2. Note about vendor/cache directory

In order to more quickly install the required gems, the gems have been cached and are stored in the vendor/cache directory.  Initially this was done to avoid the 
excessive amount of time bundler was taking to install all the gems and their dependencies.  To get all the requisite gems, simply run:

<pre>
bundle install --local
</pre>

The cached gems also provide a quick means for generating a gemset for the test_app.  

When developing the hydra-head gem, be sure to commit changes to the vendor/cache directory when you update or install a new gem.


h2. Acknowledgements

h3. Design & Strategic Contributions

The Hydra Framework would not exist without the extensive design effort undertaken by representatives of repository initiatives from Stanford University, University of Virginia, and University of Hull.  Contributors to that effort include Tom Cramer, Lynn McRae, Martha Sites, Richard Green, and Chris Awre.  

Thorny Staples from Fedora Commons & DuraSpace deserves special thanks for putting all of these people in the same room together.
